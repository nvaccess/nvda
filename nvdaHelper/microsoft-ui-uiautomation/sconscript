###
#This file is a part of the NVDA project.
#URL: http://www.nvaccess.org/
#Copyright 2021 NV Access Limited
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###

import os
import glob

"""
Builds the  open source Microsoft-UI-UIAutomation Remote Operations library from https://github.com/microsoft/microsoft-ui-uiautomation.
This library contains both a low-level winrt API, and a higher-level pure C++ API.
The outputs of this sconscript are:
* a 'lib' directory, containing:
	* microsoft.ui.uiAutomation.dll and .lib: the dll containing the low-level winrt implementation.
		To use in other code, link against the .lib, and also load the included microsoft.ui.uiAutomation.dll.manifest file into an activation context and activate it. 
	* UiaOperationAbstraction.lib: a static library containing runtime code for the higher-level pure C++ API.
		This should be linked into any compiled executable or library that needs to use the higher-level C++ API. 
* an 'include' directory, containing:
	* a 'UIAOperationAbstraction' directory containing all the public headers for the high-level C++ API
	* a 'winrt' directory containing the generated C++/winrt language bindings of the low-level API, required by the high-level C++ API headers
"""


Import(
	'env',
	'sourceDir',
	'sourceLibDir',
)

MSUIA_sourceDir = Dir('#include/microsoft-ui-uiautomation/src/uiAutomation')
MSUIA_lib_outDir = Dir('lib')
MSUIA_include_outDir = Dir('include')
MSUIA_solutionFile = MSUIA_sourceDir.File('UIAutomation.sln')

MSUIA_wrapper_libs = env.Command(
	target = [
		MSUIA_lib_outDir.File('Microsoft.UI.UIAutomation.dll'),
		MSUIA_lib_outDir.File('Microsoft.UI.UIAutomation.exp'),
		MSUIA_lib_outDir.File('Microsoft.UI.UIAutomation.pdb'),
		MSUIA_lib_outDir.File('Microsoft.UI.UIAutomation.lib'),
		MSUIA_lib_outDir.File('winmd/Microsoft.UI.UIAutomation.winmd'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/microsoft.ui.uiautomation.h'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.0.h'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.1.h'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.2.h'),
	],
	source = [
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Microsoft.UI.UIAutomation.vcxproj'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Microsoft.UI.UIAutomation.idl'),
		glob.glob(os.path.join(MSUIA_sourceDir.abspath, 'microsoft.ui.uiautomation', '*.cpp')),
		glob.glob(os.path.join(MSUIA_sourceDir.abspath, 'microsoft.ui.uiautomation', '*.h')),
	],
	action = [
		# Fetch any required NuGet packages
		f"msbuild {MSUIA_solutionFile} /t:Restore /p:RestorePackagesConfig=true,Configuration=Release,Platform=x86",
		# Remove any old generated files
		Delete(MSUIA_sourceDir.Dir('microsoft.ui.uiautomation/Generated Files')),
		# Do the actual build
		"msbuild /t:Build /p:Configuration=Release,Platform=x86,OutDir={outDir}/ $SOURCE".format(outDir=MSUIA_lib_outDir.abspath)
	],
)
env.Ignore(MSUIA_wrapper_libs,MSUIA_sourceDir.File('microsoft.ui.uiautomation/Microsoft.UI.UIAutomation_h.h'))

env.Install(sourceLibDir,MSUIA_wrapper_libs[0])
env.Install(sourceLibDir, "Microsoft.UI.UIAutomation.dll.manifest")

MSUIA_abstraction_libs = env.Command(
	target = [
		MSUIA_lib_outDir.File('UiaOperationAbstraction.lib'),
	],
	source = [
		MSUIA_sourceDir.File('UiaOperationAbstraction/UiaOperationAbstraction.vcxproj'),
		glob.glob(os.path.join(MSUIA_sourceDir.abspath, 'UiaOperationAbstraction', '*.cpp')),
		glob.glob(os.path.join(MSUIA_sourceDir.abspath, 'UiaOperationAbstraction', '*.h')),
	],
	action = [
		"msbuild /t:Build /p:Configuration=Release,Platform=x86,OutDir={outDir}/ $SOURCE".format(outDir=MSUIA_lib_outDir.abspath),
	]
)

env.Depends(MSUIA_abstraction_libs,MSUIA_wrapper_libs)

MSUIA_wrapper_header = env.Install(
	MSUIA_include_outDir.Dir('winrt'),
	MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/microsoft.ui.uiautomation.h'),
)
env.Depends(MSUIA_wrapper_header,MSUIA_wrapper_libs)

MSUIA_wrapper_impl = env.Install(
	MSUIA_include_outDir.Dir('winrt/impl'),
	[
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.0.h'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.1.h'),
		MSUIA_sourceDir.File('microsoft.ui.uiautomation/Generated Files/winrt/impl/microsoft.ui.uiautomation.2.h'),
	]
)
env.Depends(MSUIA_wrapper_impl,MSUIA_wrapper_libs)


MSUIA_abstraction_headers = env.Install(
	MSUIA_include_outDir.Dir('UiaOperationAbstraction'),
	[
		MSUIA_sourceDir.File('UiaOperationAbstraction/UiaOperationAbstraction.h'),
		MSUIA_sourceDir.File('UiaOperationAbstraction/UiaTypeAbstractionEnums.g.h'),
		MSUIA_sourceDir.File('UiaOperationAbstraction/UiaTypeAbstraction.g.h'),
		MSUIA_sourceDir.File('UiaOperationAbstraction/SafeArrayUtil.h'),
	]
)

env.Depends(MSUIA_abstraction_headers,[MSUIA_wrapper_header,MSUIA_wrapper_impl])

Return(['MSUIA_lib_outDir','MSUIA_include_outDir'])
