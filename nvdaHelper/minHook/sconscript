Import([
	'env',
])


minhookPath=Dir('#include/minhook')
env=env.Clone(CPPPATH=minhookPath.Dir('include'))

# Don't analyze the code as not our project
if 'analyze' in env['nvdaHelperDebugFlags']:
	env.Append(CCFLAGS='/analyze-')

HDESourceFile='HDE64/src/hde64.c' if env['TARGET_ARCH']=='x86_64' else 'HDE32/hde32.c'

sourceFiles=[
	HDESourceFile,
	'buffer.cpp',
	'export.cpp',
	'hook.cpp',
	'thread.cpp',
	'trampoline.cpp',
]

objFiles=[env.Object('_minHook_%s.obj'%x.replace('/','_'),minhookPath.File('src/%s'%x)) for x in sourceFiles]
objFiles.append('dllmain.cpp')
resFile=env.RES('_minHook',minhookPath.File('dll_resources/minHook.rc'))

minHookLib=env.SharedLibrary(
	target='minHook',
	source=objFiles+[resFile,minhookPath.File('dll_resources/minHook.def')],
)

Return('minHookLib')
