###
#This file is a part of the NVDA project.
#URL: http://www.nvda-project.org/
#Copyright 2006-2010 NVDA contributers.
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###

import os
import shutil

Import(
	'env',
	'sourceDir',
	'sourceTypelibDir',
	'libInstallDir',
	'clientInstallDir',
)

# some utilities for COM proxies
def clsidStringToCLSIDDefine(clsidString):
	"""
	Converts a CLSID string of the form "{abcdef12-abcd-abcd-abcd-abcdef123456}"
	Into a c-style struct initializer for initializing a GUID (I.e. "{0xabcdef12,0xabcd,0xabcd,{0xab,0xcd,0xab,0xcd,0xef,0x12,0x34,0x56}}") 
	"""
	d=clsidString[1:-1].replace('-','')
	return "{%s,%s,%s,%s}"%(
		"0x"+d[0:8],
		"0x"+d[8:12],
		"0x"+d[12:16],
		"{%s}"%(",".join("0x"+d[x:x+2] for x in xrange(16,32,2)))
	)

def COMProxyDllBuilder(env,target,source,proxyClsid):
	"""
	Builds a COM proxy dll from iid, proxy and dlldata c files generated from an IDL file with MIDL.
	It provides the needed linker flags, and also embeds a manifest in the dll registering the given proxy CLSID for this dll's class object.
	"""
	proxyName=str(target)
	manifestFile=env.Substfile(
		target=proxyName+'.manifest',
		source='COMProxy.manifest.subst', 
		SUBST_DICT={
			'%proxyClsid%':proxyClsid,
			'%proxyName%':proxyName,
		}
	)
	proxyDll=env.SharedLibrary(
		target=target,
		source=source,
		LIBS=['rpcrt4','oleaut32','ole32'],
		CPPDEFINES=[
			env['CPPDEFINES'],
			'WIN32',
			('PROXY_CLSID_IS',clsidStringToCLSIDDefine(proxyClsid)),
		],
		LINKFLAGS=[
			env['LINKFLAGS'],
			'/export:DllGetClassObject,private',
			'/export:DllCanUnloadNow,private',
			'/export:GetProxyDllInfo,private',
			'/manifest:embed',
			'/manifestinput:'+manifestFile[0].path,
		],
	)
	env.Depends(proxyDll,manifestFile)
	return proxyDll
env.AddMethod(COMProxyDllBuilder,'COMProxyDll')

# We only support compiling with MSVC 14.1 (2017)
if not env.get('MSVC_VERSION')=='14.1':
	raise RuntimeError("Visual C++ 14.1 (Visual Studio 2017) not found")


TARGET_ARCH=env['TARGET_ARCH']
debug=env['nvdaHelperDebugFlags']
release=env['release']
signExec=env['signExec'] if env['certFile'] else None

#Some defines and includes for the environment
env.Append(
	CPPDEFINES=[
		'UNICODE',
		'_CRT_SECURE_NO_DEPRECATE',
		('LOGLEVEL','${nvdaHelperLogLevel}'),
		('_WIN32_WINNT','_WIN32_WINNT_WIN7')
	]
)
env.Append(CCFLAGS=['/W3','/WX'])
if 'analyze' in debug:
	env.Append(CCFLAGS=['/analyze'])
	# Disable: Inconsistent annotation for 'x': this instance has no annotations.
	# Seems all MIDL-generated code from idl files don't add annotations 
	env.Append(CCFLAGS='/wd28251')
	# Disable: 'x': unreferenced formal parameter
	# We use a great deal of hook functions where we have no need for various parameters 
	env.Append(CCFLAGS='/wd4100')

env.Append(CXXFLAGS=['/EHsc'])

env.Append(CPPPATH=['#/include','#/miscDeps/include',Dir('.').abspath])
env.Append(
	LINKFLAGS=[
		'/incremental:no',
		'/WX',
		'/subsystem:windows,6.01',
	]
)
env.Append(LINKFLAGS='/release') #We always want a checksum in the header
env.Append(MIDLFLAGS='/x64' if TARGET_ARCH=='x86_64' else '/win32')

if not release: 
	env.Append(CCFLAGS=['/Od'])
else:
	env.Append(CCFLAGS='/O2')
	env.Append(CCFLAGS='/GL')
	env.Append(LINKFLAGS=['/LTCG'])

if 'debugCRT' not in debug:
	env.Append(CPPDEFINES=['NDEBUG'])

if 'RTC' in debug:
	env.Append(CCFLAGS=['/RTCsu'])


#We always want debug symbols
env.Append(PDB='${TARGET}.pdb')
env.Append(LINKFLAGS='/OPT:REF') #having symbols usually turns this off but we have no need for unused symbols

win10env=env.Clone()
win10env.Append(CXXFLAGS='/ZW')
Export('win10env')

if 'debugCRT' in debug:
	env.Append(CCFLAGS=['/MTd'])
else:
	env.Append(CCFLAGS=['/MT'])

Export('env')

acrobatAccessRPCStubs=env.SConscript('acrobatAccess_sconscript')
Export('acrobatAccessRPCStubs')
if TARGET_ARCH=='x86':
	env.Install(sourceTypelibDir,acrobatAccessRPCStubs[0]) #typelib

ia2RPCStubs=env.SConscript('ia2_sconscript')
Export('ia2RPCStubs')
if signExec:
	env.AddPostAction(ia2RPCStubs[0],[signExec])
env.Install(libInstallDir,ia2RPCStubs[0]) #proxy dll
if TARGET_ARCH=='x86':
	env.Install(sourceTypelibDir,ia2RPCStubs[1]) #typelib

iSimpleDomRPCStubs=env.SConscript('ISimpleDOM_sconscript')
if signExec:
	env.AddPostAction(iSimpleDomRPCStubs[0],[signExec])
env.Install(libInstallDir,iSimpleDomRPCStubs[0]) #proxy dll
if TARGET_ARCH=='x86':
	env.Install(sourceTypelibDir,iSimpleDomRPCStubs[1]) #typelib

mathPlayerRPCStubs=env.SConscript('mathPlayer_sconscript')
if TARGET_ARCH=='x86':
	env.Install(sourceTypelibDir,mathPlayerRPCStubs[0]) #typelib

if TARGET_ARCH=='x86':
	localLib=env.SConscript('local/sconscript')
	Export('localLib')
	if signExec:
		env.AddPostAction(localLib[0],[signExec])
	env.Install(libInstallDir,localLib)
	win10localLib=env.SConscript('localWin10/sconscript',)
	if signExec:
		env.AddPostAction(win10localLib[0],[signExec])
	env.Install(libInstallDir,win10localLib)

clientLib=env.SConscript('client/sconscript')
Export('clientLib')
if signExec:
	env.AddPostAction(clientLib[0],[signExec])
env.Install(clientInstallDir,clientLib)

minHookLib=env.SConscript('minHook/sconscript')
Export('minHookLib')
if signExec:
	env.AddPostAction(minHookLib[0],[signExec])
env.Install(libInstallDir,minHookLib)

remoteLib=env.SConscript('remote/sconscript')
Export('remoteLib')
if signExec:
	env.AddPostAction(remoteLib[0],[signExec])
env.Install(libInstallDir,remoteLib)

if TARGET_ARCH=='x86_64':
	remoteLoaderProgram=env.SConscript('remoteLoader/sconscript')
	if signExec:
		env.AddPostAction(remoteLoaderProgram,[signExec])
	env.Install(libInstallDir,remoteLoaderProgram)

if TARGET_ARCH=='x86':
	env.SConscript('espeak/sconscript')
	env.SConscript('liblouis/sconscript')
