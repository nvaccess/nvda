[build-system]
requires = ["setuptools~=72.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nvda"
dynamic = ["version"]
description = "NonVisual Desktop Access (NVDA)"
maintainers = [
	{name = "NV Access", email = "info@nvaccess.org"},
]
requires-python = ">=3.11,<3.12"
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Intended Audience :: End Users/Desktop",
	"License :: OSI Approved :: GNU General Public License v2",
	"Operating System :: Microsoft :: Windows",
	"Programming Language :: Python :: 3",
	"Topic :: Accessibility",
]
readme = "readme.md"
license = {file = "copying.txt"}
dependencies = [
	# NVDA's runtime dependencies
	"comtypes==1.4.6",
	"cryptography==44.0.1",
	"pyserial==3.5",
	"wxPython==4.2.2",
	# pinned to a commit in tool.uv.sources
	"configobj",
	"requests==2.32.3",
	"url-normalize==1.4.3",
	"schedule==1.2.2",
	# NVDA_DMP requires diff-match-patch
	"fast-diff-match-patch==2.1.0",
	# typing_extensions are required for specifying default value for `TypeVar` prior to Python 3.13 (see PEP 696)
	"typing-extensions==4.12.2",
	# pycaw is a Core Audio Windows Library used for sound split
	"pycaw==20240210",
	# Sanitize HTML for browsable messages and documentation output to prevent XSS from translators
	"nh3==0.2.19",
	# l10nUtil requires Crowdin
	"crowdin-api-client==1.21.0",
	# Building user documentation and the l10nUtil
	"Markdown==3.7",
	"lxml==5.3.2",
	"mdx_truly_sane_lists==1.3",
	"markdown-link-attr-modifier==0.2.1",
	"mdx-gh-links==0.4",
]

[project.urls]
Homepage = "https://www.nvaccess.org/"
Repository = "https://github.com/nvaccess/nvda.git"
Issues = "https://github.com/nvaccess/nvda/issues"

[tool.ruff]
line-length = 110

builtins = [
	# translation lookup
	"_",
	# translation lookup
	"ngettext",
	# translation lookup
	"pgettext",
	# translation lookup
	"npgettext",
]

include = [
	"*.py",
	"*.pyw",
	"sconstruct",
	"*sconscript",
]

exclude = [
	".git",
	"__pycache__",
	".tox",
	"build",
	"output",
	".venv",
	# When excluding concrete paths relative to a directory,
	# not matching multiple folders by name e.g. `__pycache__`,
	# paths are relative to the configuration file.
	"./include/*",
	"./miscDeps",
	"./source/louis",
	# #10924: generated by third-party dependencies
	"./source/comInterfaces/*",
	# Code from add-ons
	"./source/userConfig/addons/*",
]

[tool.ruff.format]
indent-style = "tab"
line-ending = "lf"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint]
ignore = [
	# indentation contains tabs
	"W191",
]
logger-objects = ["logHandler.log"]

[tool.ruff.lint.per-file-ignores]
# sconscripts contains many inbuilt functions not recognised by the lint,
# so ignore F821.
"sconstruct" = ["F821"]
"*sconscript" = ["F821"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"winsound.PlaySound".msg= "PlaySound uses winmm, which is deprecated in favor of the Windows core audio APIs."

[tool.licensecheck]
only_licenses = ["BSD", "MIT", "Python", "LGPLV3+", "Apache"]
ignore_packages = [
	# Compatible licenses:
	"certifi",  # Mozilla Public License 2.0
	"markdown-link-attr-modifier",  # GPLV3 license, but not in PyPI correctly
	"pycaw",  # MIT license, but not in PyPI
	"urllib3",  # MIT license, but not in PyPI
	"wxPython",  # wxWindows Library License
]


[tool.pyright]
venvPath = ".venv"
venv = "."
pythonPlatform = "Windows"
typeCheckingMode = "strict"

include = [
	"**/*.py",
	"**/*.pyw",
]

exclude = [
	"sconstruct",
	"*sconscript",
	".git",
	"__pycache__",
	".tox",
	"build",
	"output",
	".venv",
	# When excluding concrete paths relative to a directory,
	# not matching multiple folders by name e.g. `__pycache__`,
	# paths are relative to the configuration file.
	"./include/*",
	"./miscDeps",
	"./source/louis",
	# #10924: generated by third-party dependencies
	"./source/comInterfaces/*",
	# Code from add-ons
	"./source/userConfig/addons/*",
]

# Tell pyright where to load python code from
extraPaths = [
	"./source",
	# Used by system tests
	"./tests/system/libraries",
	# Used internally in NVDA
	"./miscDeps/python",
]

# General config
analyzeUnannotatedFunctions = true
deprecateTypingAliases = true

# Stricter typing
strictParameterNoneValue = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

# Compliant rules
reportAssertAlwaysTrue = true
reportAssertTypeFailure = true
reportDuplicateImport = true
reportIncompleteStub = true
reportInconsistentOverload = true
reportInconsistentConstructor = true
reportInvalidStringEscapeSequence = true
reportInvalidStubStatement = true
reportInvalidTypeVarUse = true
reportMatchNotExhaustive = true
reportMissingModuleSource = true
reportMissingImports = true
reportNoOverloadImplementation = true
reportOptionalContextManager = true
reportOverlappingOverload = true
reportPrivateImportUsage = true
reportPropertyTypeMismatch = true
reportSelfClsParameterName = true
reportShadowedImports = true
reportTypeCommentUsage = true
reportTypedDictNotRequiredAccess = true
reportUndefinedVariable = true
reportUnusedExpression = true
reportUnboundVariable = true
reportUnhashable = true
reportUnnecessaryCast = true
reportUnnecessaryContains = true
reportUnnecessaryTypeIgnoreComment = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUnusedClass = true
reportUnusedCoroutine = true
reportUnusedExcept = true

# Should switch to true when possible
reportDeprecated = false  # 1834 errors

# Can be enabled by generating type stubs for modules via pyright CLI
reportMissingTypeStubs = false

# Bad rules
# These are roughly sorted by compliance to make it easier for devs to focus on enabling them.
# Errors were last checked Feb 2025.
# 1-50 errors
reportUnsupportedDunderAll = false  # 2 errors
reportAbstractUsage = false  # 3 errors
reportUntypedBaseClass = false  # 4 errors
reportOptionalIterable = false  # 5 errors
reportCallInDefaultInitializer = false  # 6 errors
reportInvalidTypeArguments = false  # 7 errors
reportUntypedNamedTuple = false  # 11 errors
reportRedeclaration = false  # 12 errors
reportOptionalCall = false  # 16 errors
reportConstantRedefinition = false  # 18 errors
reportWildcardImportFromLibrary = false  # 26 errors
reportIncompatibleVariableOverride = false  # 28 errors
reportInvalidTypeForm = false  # 38 errors


# 50-100 errors
reportGeneralTypeIssues = false  # 53 errors
reportOptionalOperand = false  # 59 errors
reportUnnecessaryComparison = false  # 67 errors
reportFunctionMemberAccess = false  # 80 errors
reportUnnecessaryIsInstance = false  # 88 errors
reportUnusedFunction = false  # 97 errors
reportImportCycles = false  # 99 errors
reportUnusedImport = false  # 113 errors
reportUnusedVariable = false  # 147 errors

# 100-1000 errors
reportOperatorIssue = false  # 102 errors
reportAssignmentType = false  # 103 errors
reportReturnType = false  # 104 errors
reportPossiblyUnboundVariable = false  # 126 errors
reportMissingSuperCall = false  # 159 errors
reportUninitializedInstanceVariable = false  # 179 errors
reportUnknownLambdaType = false  # 196 errors
reportMissingTypeArgument = false  # 204 errors
reportImplicitStringConcatenation = false  # 300+ errors
reportIncompatibleMethodOverride = false  # 300+ errors
reportPrivateUsage = false  # 900+ errors

# 1000+ errors
reportUnusedCallResult = false  # 1000+ errors
reportOptionalSubscript = false  # 1000+ errors, mostly failing to recognize config setter/getter
reportCallIssue = false  # 1000+ errors, mostly failing to recognize config setter/getter
reportOptionalMemberAccess = false  # 1683 errors
reportImplicitOverride = false  # 2000+ errors
reportIndexIssue = false  # 2000+ errors, mostly failing to recognize config setter/getter
reportAttributeAccessIssue = false  # 2000+ errors
reportArgumentType = false  # 2000+ errors
reportUnknownParameterType = false  # 4000+ errors
reportMissingParameterType = false  # 4000+ errors
reportUnknownVariableType = false  # 6000+ errors
reportUnknownArgumentType = false  # 6000+ errors
reportUnknownMemberType = false  # 20000+ errors

[tool.uv]
default-groups = "all"
python-preference = "only-system"
environments = ["sys_platform == 'win32'"]
required-version = ">=0.7.9"

[tool.setuptools]
package-dir = {"" = "source"}

[tool.uv.sources]
nvda-misc-deps = { workspace = true }
configobj = { git = "https://github.com/DiffSK/configobj", rev = "8be54629ee7c26acb5c865b74c76284e80f3aa31" }

[tool.uv.workspace]
members = [
    "miscDeps",
]

[dependency-groups]
dev = [
	"nvda-misc-deps",
	# NVDA's build system is SCons
	"SCons==4.8.1",
	# Packaging NVDA
	"py2exe==0.13.0.2",
	"setuptools~=72.0",
]
lint = [
	"ruff==0.11.12",
	"pre-commit==4.2.0",
	"pyright==1.1.401",
]
license-check = [
	"licensecheck==2024.3",
]
dev-docs = [
	# For building developer documentation
	"sphinx==8.1.2",
	"sphinx_rtd_theme==3.0.1",
]
system-tests = [
	"robotframework==7.1.1",
	"robotremoteserver==1.1.1",
	"robotframework-screencaplibrary==1.6.0",
]
unit-tests = [
	# Creating XML unit test reports
	"unittest-xml-reporting==3.2.0",
	# Feed parameters to tests neatly
	"parameterized==0.9.0",
]

[tool.setuptools.dynamic]
version = {attr = "buildVersion.version_detailed"}
