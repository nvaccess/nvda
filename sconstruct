###
# This file is a part of the NVDA project.
# URL: https://www.nvaccess.org/
# Copyright 2010-2020 NV Access Limited, Babbage B.V.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2.0, as published by
# the Free Software Foundation.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# This license can be found at:
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###

import sys
import os
import platform

# Variables for storing required version of Python, and the version which is used to run this script.
requiredPythonMajor ="3"
requiredPythonMinor = "7"
requiredPythonArchitecture = "32bit"
installedPythonMajor = str(sys.version_info.major)
installedPythonMinor = str(sys.version_info.minor)
installedPythonArchitecture = platform.architecture()[0]
# Ensure that we are running with required version of Python, otherwise inform the user and exit.
if (
	installedPythonArchitecture != requiredPythonArchitecture
	or installedPythonMajor != requiredPythonMajor
	or installedPythonMinor != requiredPythonMinor
):
	unsupportedPythonMsg = (
		("This script is started with Python %s.%s %s, however to build NVDA you have to use Python %s.%s %s.\n"
		"Please install the needed version of Python and launch SCons again, or if you have multiple "
		"versions of Python installed start this script with required version explicitly.")
	)
	raise RuntimeError(unsupportedPythonMsg %(
		installedPythonMajor,
		installedPythonMinor,
		installedPythonArchitecture,
		requiredPythonMajor,
		requiredPythonMinor,
		requiredPythonArchitecture
	)
	)
if sys.version_info.micro == 6:
	# #10696: Building with Python 3.7.6 fails. Innform user and exit.
	Py376FailMsg = "Building with Python 3.7.6 is not possible.\nPlease use more  recent version of Python 3."
	raise RuntimeError(Py376FailMsg)
sourceEnvPath = os.path.abspath(os.path.join(Dir('.').srcnode().path, "source"))
sys.path.append(sourceEnvPath)
import sourceEnv
sys.path.remove(sourceEnvPath)
import time
from glob import glob
from py2exe.dllfinder import pydll
import importlib.util
import winreg

def recursiveCopy(env,targetDir,sourceDir):
	targets=[]
	for topDir,subDirs,files in os.walk(sourceDir.abspath):
		relTopDir=os.path.relpath(topDir,sourceDir.abspath)
		for f in files:
			fNode=targetDir.Dir(relTopDir).File(f)
			env.Command(fNode,Dir(topDir).File(f),Copy('$TARGET','$SOURCE'))
			targets.append(fNode)
		if len(files)==0:
			dNode=targetDir.Dir(relTopDir)
			env.Command(dNode,Dir(topDir),Mkdir('$TARGET'))
			targets.append(dNode)
	return targets

# Import NVDA's versionInfo module.
import gettext
gettext.install("nvda")
sys.path.append("source")
import versionInfo
del sys.path[-1]

makensis = "miscDeps\\tools\\NSIS\\makensis"

# Get the path to xgettext.
XGETTEXT = os.path.abspath(os.path.join("miscDeps", "tools", "xgettext.exe"))

def keyCommandsDocTool(env):
	import keyCommandsDoc
	kcdAction=env.Action(
		lambda target,source,env: not keyCommandsDoc.KeyCommandsMaker(source[0].path,target[0].path).make(),
		lambda target,source,env: 'Generating %s'%target[0],
	)
	kcdBuilder=env.Builder(
		action=kcdAction,
		suffix='.t2t',
		src_suffix='.t2t',
	)
	env['BUILDERS']['keyCommandsDoc']=kcdBuilder

keyCommandsLangBlacklist=set([])

vars = Variables()
vars.Add("version", "The version of this build", versionInfo.version)
vars.Add("version_build", "A unique number for this build.", "0")
vars.Add(BoolVariable("release", "Whether this is a release version", False))
vars.Add("publisher", "The publisher of this build", versionInfo.publisher)
vars.Add("updateVersionType", "The version type for which to check for updates", versionInfo.updateVersionType or "")
vars.Add(PathVariable("certFile", "The certificate file with which to sign executables", "",
	lambda key, val, env: not val or PathVariable.PathIsFile(key, val, env)))
vars.Add("certPassword", "The password for the private key in the signing certificate", "")
vars.Add("certTimestampServer", "The URL of the timestamping server to use to timestamp authenticode signatures", "")
vars.Add(PathVariable("outputDir", "The directory where the final built archives and such will be placed", "output",PathVariable.PathIsDirCreate))
vars.Add(ListVariable("nvdaHelperDebugFlags", "a list of debugging features you require", 'none', ["debugCRT","RTC","analyze"]))
vars.Add(EnumVariable('nvdaHelperLogLevel','The level of logging you wish to see, lower is more verbose','15',allowed_values=[str(x) for x in range(60)]))
if "tests" in COMMAND_LINE_TARGETS:
	vars.Add("unitTests", "A list of unit tests to run", "")
if "lint" in COMMAND_LINE_TARGETS:
	vars.Add(  # pass through variable that lint is requested
		"doLint",
		"internal use",
		True
	)
	vars.Add(
		"base",
		"Lint is done only on a diff, specify the ref to use as base for the diff.",
		None
	)
if "systemTests" in COMMAND_LINE_TARGETS:
	vars.Add("filter", "A filter for the name of the system test(s) to run. Wildcards accepted.", "")

#Base environment for this and sub sconscripts
env = Environment(variables=vars,HOST_ARCH='x86',tools=[
	"textfile",
	"gettextTool",
	"t2t"
	,keyCommandsDocTool,
	"doxygen",
	"recursiveInstall"
])

# speed up subsiquent runs by checking timestamps of targets and dependencies, and only using md5 if timestamps differ.
env.Decider('MD5-timestamp')

#Make our recursiveCopy function available to any script using this environment
env.AddMethod(recursiveCopy)

#Check for any unknown variables
unknown=vars.UnknownVariables().keys()
if len(unknown)>0:
	print("Unknown commandline variables: %s"%unknown)
	Exit(1)

#Ensure that any Python subprocesses (such as for py2exe) can find our Python directory in miscDeps
env['ENV']['PYTHONPATH']=";".join(sourceEnv.PYTHON_DIRS)

env["copyright"]=versionInfo.copyright
env['version_year']=versionInfo.version_year
env['version_major']=versionInfo.version_major
env['version_minor']=versionInfo.version_minor
version = env["version"]
version_build = env["version_build"]
release = env["release"]
publisher = env["publisher"]
certFile = env["certFile"]
certPassword = env["certPassword"]
certTimestampServer = env["certTimestampServer"]
userDocsDir=Dir('user_docs')
sourceDir = env.Dir("source")
Export('sourceDir')
clientDir=Dir('extras/controllerClient')
Export('clientDir')
sourceLibDir=sourceDir.Dir('lib')
Export('sourceLibDir')
sourceTypelibDir=sourceDir.Dir('typelibs')
Export('sourceTypelibDir')
sourceLibDir64=sourceDir.Dir('lib64')
Export('sourceLibDir64')
sourceLibDirArm64=sourceDir.Dir('libArm64')
Export('sourceLibDirArm64')
buildDir = Dir("build")
outFilePrefix = "nvda{type}_{version}".format(type="" if release else "_snapshot", version=version)
Export('outFilePrefix')
outputDir=Dir(env['outputDir'])
Export('outputDir')

# An action to sign an executable with certFile.
# we encrypt with SHA256 as this is the minimum required by the Windows Store for appx packages 
signExecCmd = ["signtool", "sign", "/fd", "SHA256", "/f", certFile]
if certPassword:
	signExecCmd.extend(("/p", certPassword))
if certTimestampServer:
	signExecCmd.extend(("/t", certTimestampServer))
def signExec(target,source,env):
	print([str(x) for x in target])
	#sys.exit(1)
	# #3795: signtool can quite commonly fail with timestamping, so allow it to try up to 3 times with a 1 second delay between each try. 
	res=0
	for count in range(3):
		res=env.Execute([signExecCmd+[target[0].abspath]])
		if not res:
			return 0 # success
		time.sleep(1)
	return res # failed
#Export via scons environment so other libraries can be signed
env['signExec']=signExec

#architecture-specific environments
archTools=['default','midl','msrpc']
env32=env.Clone(TARGET_ARCH='x86',tools=archTools)
env64=env.Clone(TARGET_ARCH='x86_64',tools=archTools)
envArm64=env.Clone(TARGET_ARCH='arm64',tools=archTools)
# Hack around odd bug where some tool [after] msvc states that static and shared objects are different
env32['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
env64['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
envArm64['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1

env=env32

projectRCSubstDict={
	'%version_year%':env['version_year'],
	'%version_major%':env['version_major'],
	'%version_minor%':env['version_minor'],
	'%version_build%':env['version_build'],
	'%copyright%':env['copyright'],
	'%publisher%':env['publisher'],
	'%version%':env['version'],
	'%productName%':"%s (%s)"%(versionInfo.name,versionInfo.longName),
}
resFile=env.RES(target='build/nvda.res',
	source=env.Substfile(target='build/nvda.rc', source='nvdaHelper/nvda.rc.subst', SUBST_DICT=projectRCSubstDict))
env32['projectResFile'] = resFile
env64['projectResFile'] = resFile
envArm64['projectResFile'] = resFile

#Fill sourceDir with anything provided for it by miscDeps
env.recursiveCopy(sourceDir,Dir('miscdeps/source'))
# Copy in some other dependencies.
jabDll = "windowsaccessbridge-32.dll"
Command(sourceLibDir.File(jabDll),
	env.Dir("#include/javaAccessBridge32").File(jabDll),
	Copy("$TARGET", "$SOURCE"))

env.SConscript('source/comInterfaces_sconscript',exports=['env'])

#Process nvdaHelper scons files
env32.SConscript('nvdaHelper/archBuild_sconscript',exports={'env':env32,'clientInstallDir':clientDir.Dir('x86'),'libInstallDir':sourceLibDir},variant_dir='build/x86')
env64.SConscript('nvdaHelper/archBuild_sconscript',exports={'env':env64,'clientInstallDir':clientDir.Dir('x64'),'libInstallDir':sourceLibDir64},variant_dir='build/x86_64')
envArm64.SConscript('nvdaHelper/archBuild_sconscript',exports={'env':envArm64,'clientInstallDir':clientDir.Dir('arm64'),'libInstallDir':sourceLibDirArm64},variant_dir='build/arm64')

#Allow all NVDA's gettext po files to be compiled in source/locale
for po in env.Glob(sourceDir.path+'/locale/*/lc_messages/*.po'):
	env.gettextMoFile(po)

#Allow all key command t2t files to be generated from their userGuide t2t sources
for lang in os.listdir(userDocsDir.path):
	if lang in keyCommandsLangBlacklist: continue
	for ug in glob(os.path.join(userDocsDir.path,lang,'userGuide.t2t')):
		env.keyCommandsDoc(File(ug).File('keyCommands.t2t'),ug)

t2tBuildConf = env.Textfile(userDocsDir.File("build.t2tConf"), [
	# We need to do this one as PostProc so it gets converted for the title.
	r"%!PostProc: NVDA_VERSION {}".format(version),
	r"%!PreProc: NVDA_URL {}".format(versionInfo.url),
	r"%!PreProc: NVDA_COPYRIGHT_YEARS {}".format(versionInfo.copyrightYears),
])

#Allow all t2t files to be converted to html in user_docs
#As we use scons Glob this will also include the keyCommands.t2t files
for t2tFile in env.Glob(os.path.join(userDocsDir.path,'*','*.t2t')):
	htmlFile=env.txt2tags(t2tFile)
	#txt2tags can not be run in parallel so make sure scons knows this
	env.SideEffect('_txt2tags',htmlFile)
	# All of our t2t files require build.t2tConf.
	env.Depends(htmlFile,t2tBuildConf)
# Build unicode CLDR dictionaries
env.SConscript('cldrDict_sconscript',exports=['env', 'sourceDir'])

# A builder to generate an NVDA distribution.
def NVDADistGenerator(target, source, env, for_signature):
	buildVersionFn = os.path.join(str(source[0]), "_buildVersion.py")
	# Make the NVDA build use the specified version.
	# We don't do this using normal scons mechanisms because we want it to be cleaned up immediately after this builder
	# and py2exe will cause bytecode files to be created for it which scons doesn't know about.
	updateVersionType = env["updateVersionType"] or None
	# Any '\n' characters written are translated to the system default line separator, os.linesep.
	action = [lambda target, source, env: open(buildVersionFn, "w", encoding="utf-8").write(
		'version = {version!r}\n'
		'publisher = {publisher!r}\n'
		'updateVersionType = {updateVersionType!r}\n'
		'version_build = {version_build!r}\n'
		.format(version=version, publisher=publisher, updateVersionType=updateVersionType,version_build=version_build)
	)
	# In Python 3 write returns the number of characters written,
	# which scons treats as an error code.	
	and None]

	buildCmd = ["cd", source[0].path, "&&",
		sys.executable]
	if release:
		buildCmd.append("-O")
	# Issue errors about str(bytes_instance), str(bytearray_instance)
	buildCmd.append("-bb")
	buildCmd.extend(("setup.py", "-vv", "build", "--build-base", buildDir.abspath,
		"py2exe", "--dist-dir", target[0].abspath))
	if release:
		buildCmd.append("-O1")
	if env.get("uiAccess"):
		buildCmd.append("--enable-uiAccess")

	action.append(buildCmd)

	# Python3 has started signing its main python dll.
	# However, Py2exe currently tries to add a string resource to it, invalidating the signature and possibly currupting the certificate.
	# Therefore, copy a fresh version  of the dll one more time once py2exe has completed.
	action.append(Copy(target[0],pydll))

	# #10031: Apps written in Python 3 require Universal CRT to be installed. We cannot assume users have it on their systems.
	# Therefore , copy required libraries from Windows 10 SDK.
	try:
		with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r'SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0', 0,winreg.KEY_READ|winreg.KEY_WOW64_32KEY) as SDKKey:
			CRTDir = os.path.join(winreg.QueryValueEx(SDKKey, 'InstallationFolder')[0], "Redist", "ucrt", "DLLs", "x86")
	except WindowsError:
		raise RuntimeError("Windows 10 SDK not found")
	if os.path.isdir(CRTDir):
		with os.scandir(CRTDir) as dir:
			for file in dir:
				if file.name.endswith(".dll") and file.is_file():
					action.append(Copy(target[0], file.path))

	if certFile:
		for prog in "nvda_noUIAccess.exe", "nvda_uiAccess.exe", "nvda_slave.exe", "nvda_eoaProxy.exe":
			action.append(lambda target,source,env, progByVal=prog: signExec([target[0].File(progByVal)],source,env))

	action.extend((
		Delete(buildVersionFn),
		Delete(importlib.util.cache_from_source(buildVersionFn))
	))

	return action
env["BUILDERS"]["NVDADist"] = Builder(generator=NVDADistGenerator, target_factory=Dir)

# A builder to generate a zip archive.
# We roll our own instead of using env.Zip because we want to create some archives
# relative to a specified directory.
def ZipArchiveAction(target, source, env):
	relativeTo = env.get("relativeTo", None)
	if relativeTo:
		relativeTo = relativeTo.path
		def getArcName(origName):
			arcName = os.path.relpath(origName, relativeTo)
			if arcName.startswith(".."):
				arcName = arcName.replace(".." + os.path.sep, "")
			return "" if arcName == "." else arcName
	else:
		getArcName = lambda origName: "" if origName == "." else origName

	# Nasty hack to make zipfile use best compression, since it isn't configurable.
	# Tried setting memlevel to 9 as well, but it made compression slightly worse.
	import zlib
	origZDefComp = zlib.Z_DEFAULT_COMPRESSION
	zlib.Z_DEFAULT_COMPRESSION = zlib.Z_BEST_COMPRESSION

	import zipfile
	zf = None
	try:
		zf = zipfile.ZipFile(target[0].path, "w", zipfile.ZIP_DEFLATED)
		for s in source:
			if os.path.isdir(s.path):
				for path, dirs, files in os.walk(s.path):
					arcPath = getArcName(path)
					if arcPath:
						zf.write(path, arcPath)
					for f in files:
						zf.write(os.path.join(path, f), os.path.join(arcPath, f))
			else:
				zf.write(s.path, getArcName(s.path))

	finally:
		if zf:
			zf.close()
		zlib.Z_DEFAULT_COMPRESSION = origZDefComp

env["BUILDERS"]["ZipArchive"] = Builder(action=ZipArchiveAction)

uninstFile=File("dist/uninstall.exe")
uninstGen = env.Command(File("uninstaller/uninstGen.exe"), "uninstaller/uninst.nsi",
	[[makensis, "/V2",
	"/DVERSION=$version", '/DPUBLISHER="$publisher"','/DCOPYRIGHT="$copyright"','/DVERSION_YEAR="$version_year"','/DVERSION_MAJOR="$version_major"','/DVERSION_MINOR="$version_minor"','/DVERSION_BUILD="$version_build"',
	"/DUNINSTEXE=%s"%uninstFile.abspath,
	"/DINSTEXE=${TARGET.abspath}",
	"$SOURCE"]])
uninstaller=env.Command(uninstFile,uninstGen,[uninstGen])
if certFile:
	env.AddPostAction(uninstaller, [signExec])

dist = env.NVDADist("dist", [sourceDir,userDocsDir], uiAccess=bool(certFile))
env.Depends(dist,uninstaller)
# Dir node targets don't get cleaned, so cleaning of the dist nodes has to be explicitly specified.
env.Clean(dist, dist)
# Clean the intermediate build directory.
env.Clean([dist], buildDir)

launcher = env.Command(outputDir.File("%s.exe" % outFilePrefix), ["launcher/nvdaLauncher.nsi", dist],
	[[makensis, "/V2",
	"/DVERSION=$version", '/DPUBLISHER="$publisher"','/DCOPYRIGHT="$copyright"','/DVERSION_YEAR="$version_year"','/DVERSION_MAJOR="$version_major"','/DVERSION_MINOR="$version_minor"','/DVERSION_BUILD="$version_build"',
	"/DNVDADistDir=${SOURCES[1].abspath}", "/DLAUNCHEREXE=${TARGET.abspath}",
	"$SOURCE"]])
if certFile:
	env.AddPostAction(launcher, [signExec])
env.Alias("launcher", launcher)

clientArchive = env.ZipArchive(outputDir.File("%s_controllerClient.zip" % outFilePrefix), clientDir, relativeTo=clientDir)
env.Alias("client", clientArchive)

changesFile=env.Command(outputDir.File("%s_changes.html" % outFilePrefix),userDocsDir.File('en/changes.html'),Copy('$TARGET','$SOURCE'))
env.Alias('changes',changesFile)
userGuideFile=env.Command(outputDir.File("userGuide.html"),userDocsDir.File('en/userGuide.html'),Copy('$TARGET','$SOURCE'))
env.Alias('userGuide',userGuideFile)

def makePot(target, source, env):
	# Generate the pot.
	if env.Execute([["cd", sourceDir, "&&",
			XGETTEXT,
			"-o", target[0].abspath,
			"--package-name", versionInfo.name, "--package-version", version,
			"--foreign-user",
			"--add-comments=Translators:",
			"--keyword=pgettext:1c,2",
			# Needed because xgettext doesn't recognise the .pyw extension.
			"--language=python",
		] + [os.path.relpath(str(f), str(sourceDir)) for f in source]
	]) != 0:
		raise RuntimeError("xgettext failed")

	# Tweak the headers.
	potFn = str(target[0])
	tmpFn = "%s.tmp" % potFn
	with open(potFn, "rt") as inp, open(tmpFn, "wt") as out:
		for lineNum, line in enumerate(inp):
			if lineNum == 1:
				line = "# %s\n" % versionInfo.copyright
			elif lineNum == 2:
				# Delete line.
				continue
			elif lineNum == 15:
				line = line.replace("CHARSET", "UTF-8")
			out.write(line)
	os.remove(potFn)
	os.rename(tmpFn, potFn)

env.SConscript("devDocs/sconscript", exports=["env", "outputDir", "sourceDir", "t2tBuildConf"])

pot = env.Command(outputDir.File("%s.pot" % outFilePrefix),
	# Don't use sourceDir as the source, as this depends on comInterfaces and nvdaHelper.
	# We only depend on the Python files.
	[f for pattern in ("*.py", "*.pyw", r"*\*.py", r"*\*\*.py")
		for f in env.Glob(os.path.join(sourceDir.path, pattern))
		# Exclude comInterfaces, since these don't contain translatable strings
		# and they cause unknown encoding warnings.
		if not f.path.startswith("source\\comInterfaces\\")],
	makePot)

env.Alias("pot", pot)

symbolsList=[]
symbolsList.extend(env.Glob(os.path.join(sourceLibDir.path,'*.pdb')))
symbolsList.extend(env.Glob(os.path.join(sourceLibDir64.path,'*.pdb')))
symbolsArchive = env.ZipArchive(outputDir.File("%s_debugSymbols.zip" % outFilePrefix), symbolsList)
env.Alias("symbolsArchive", symbolsArchive)

appx_storeSubmission=env.SConscript("appx/sconscript",exports={'env':env,'isStoreSubmission':True},variant_dir='build\\appx_storeSubmission')
installed_appx_storeSubmission=env.Install('output',appx_storeSubmission)
appx_sideLoadable=env.SConscript("appx/sconscript",exports={'env':env,'isStoreSubmission':False},variant_dir='build\\appx_sideLoadable')
installed_appx_sideLoadable=env.Install('output',appx_sideLoadable)
env.Alias('appx',[installed_appx_storeSubmission,installed_appx_sideLoadable])

env.Default(dist)

env.SConscript("tests/sconscript", exports=["env", "sourceDir", "pot"])
