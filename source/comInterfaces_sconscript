###
#This file is a part of the NVDA project.
#URL: http://www.nvda-project.org/
#Copyright 2013-2017 NV Access Limited.
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###
from typing import List
import fileinput
import re
from SCons.Node.FS import File

Import(
	'env',
)

import importlib.util

# Monkeypatch comtypes to clear the importlib cache when importing a new module
import comtypes.client._generate
old_my_import = comtypes.client._generate._my_import
def new_my_import(fullname):
	importlib.invalidate_caches()
	return old_my_import(fullname)
comtypes.client._generate._my_import = new_my_import

def makeIDEFriendly(path:str) -> None:
	"""
	Add a local import of * so that tools and IDE's can find definitions.
	Prefer to import from comtypes.gen, at runtime behavior will not have changed.
	Make code like:
	``` python
	from comtypes.gen import _C523F390_9C83_11D3_9094_00104BD0D535_0_3_0
	globals().update(_C523F390_9C83_11D3_9094_00104BD0D535_0_3_0.__dict__)
	__name__ = 'comtypes.gen.AcrobatAccessLib'
	```
	Become:
	``` python
	try:
		from comtypes.gen import _C523F390_9C83_11D3_9094_00104BD0D535_0_3_0
	except ModuleNotFoundError:
		from _C523F390_9C83_11D3_9094_00104BD0D535_0_3_0 import *
	globals().update(_C523F390_9C83_11D3_9094_00104BD0D535_0_3_0.__dict__)
	__name__ = 'comtypes.gen.AcrobatAccessLib'
	```
	@param path: Path to the friendly name comInterfaces module.
	"""
	importTemplate = (
"""try:
	from comtypes.gen import {libIdentifier}
except ModuleNotFoundError:
	import {libIdentifier}
	from {libIdentifier} import *
""")

	importPattern = re.compile(r"from comtypes\.gen import ([\w]+)\n")
	for line in fileinput.input(path, inplace=True):
		match = importPattern.match(line)
		if match:
			libId = match.group(1)
			print(importTemplate.format(libIdentifier=libId), end='')
		else:
			print(line, end='')

def interfaceAction(target:List[File], source, env):
	clsid = env.get('clsid')
	if clsid:
		source=(clsid, env['majorVersion'], env['minorVersion'])
	else:
		source=str(source[0])
	comtypes.client.GetModule(source)
	# re-write the the "friendlyNameFile" so that tools/IDEs can find the
	# definitions
	for t in target:
		path: str = t.abspath
		if path.endswith(".py"):
			makeIDEFriendly(path)

interfaceBuilder=env.Builder(
	action=env.Action(interfaceAction),
)
env['BUILDERS']['comtypesInterface'] = interfaceBuilder

# Force comtypes generated interfaces in to our directory
import comtypes.client
comtypes.client.gen_dir=Dir('comInterfaces').abspath

COM_INTERFACES = {
	"IAccessible2Lib.py": "typelibs/ia2.tlb",
	"ISimpleDOM.py": "typelibs/ISimpleDOMNode.tlb",
	"mathPlayer.py": "typelibs/mathPlayerDLL.tlb",
	"Accessibility.py": ('{1EA4DBF0-3C3B-11CF-810C-00AA00389B71}',1,0),
	"tom.py": ('{8CC497C9-A1DF-11CE-8098-00AA0047BE5D}',1,0),
	"SpeechLib.py": ('{C866CA3A-32F7-11D2-9602-00C04F8EE628}',5,0),
	"AcrobatAccessLib.py": "typelibs/AcrobatAccess.tlb",
	"FlashAccessibility.py": "typelibs/FlashAccessibility.tlb",
}

for k,v in COM_INTERFACES.items():
	targets=[
		Dir('comInterfaces').File(k),
		# This builds a .pyc file as well.
		Dir('comInterfaces').File(importlib.util.cache_from_source(k))
		]
	source = clsid = majorVersion = None
	if isinstance(v, str):
		env.comtypesInterface(targets, v)
	else:
		env.comtypesInterface(
			targets,
			Dir('comInterfaces').File('__init__.py'),
			clsid=v[0],
			majorVersion=v[1],
			minorVersion=v[2]
		)



# When cleaning comInterfaces get rid of everything
# except for things starting with __ (e.g. __init__.py)
env.Clean(
	Dir('comInterfaces'),
	Glob('comInterfaces/[!_]*') + Glob('comInterfaces/_[!_]*')
)
