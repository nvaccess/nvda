###
#This file is a part of the NVDA project.
#URL: http://www.nvda-project.org/
#Copyright 2013-2017 NV Access Limited.
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 2.0, as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#This license can be found at:
#http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
###

Import(
	'env',
)

import importlib.util

# Monkeypatch comtypes to clear the importlib cache when importing a new module
import comtypes.client._generate
old_my_import = comtypes.client._generate._my_import
def new_my_import(fullname):
	importlib.invalidate_caches()
	return old_my_import(fullname)
comtypes.client._generate._my_import = new_my_import

def interfaceAction(target,source,env):
	clsid=env.get('clsid')
	if clsid:
		source=(clsid,env['majorVersion'],env['minorVersion'])
	else:
		source=str(source[0])
	comtypes.client.GetModule(source)

interfaceBuilder=env.Builder(
	action=env.Action(interfaceAction),
)
env['BUILDERS']['comtypesInterface']=interfaceBuilder

# Force comtypes generated interfaces in to our directory
import comtypes.client
comtypes.client.gen_dir=Dir('comInterfaces').abspath

COM_INTERFACES = {
	"IAccessible2Lib.py": "typelibs/ia2.tlb",
	"ISimpleDOM.py": "typelibs/ISimpleDOMNode.tlb",
	"mathPlayer.py": "typelibs/mathPlayerDLL.tlb",
	#"Accessibility.py": ('{1EA4DBF0-3C3B-11CF-810C-00AA00389B71}',1,0),
	"tom.py": ('{8CC497C9-A1DF-11CE-8098-00AA0047BE5D}',1,0),
	"SpeechLib.py": ('{C866CA3A-32F7-11D2-9602-00C04F8EE628}',5,0),
	"AcrobatAccessLib.py": "typelibs/AcrobatAccess.tlb",
	"FlashAccessibility.py": "typelibs/FlashAccessibility.tlb",
}

for k,v in COM_INTERFACES.items():
	targets=[Dir('comInterfaces').File(k),
		# This buillds a .pyc file as well.
		Dir('comInterfaces').File(importlib.util.cache_from_source(k))]
	source=clsid=majorVersion=None
	if isinstance(v, str):
		env.comtypesInterface(targets,v)
	else:
		env.comtypesInterface(targets,Dir('comInterfaces').File('__init__.py'),clsid=v[0],majorVersion=v[1],minorVersion=v[2])

#When cleaning comInterfaces get rid of everything except for things starting with __ (e.g. __init__.py)
env.Clean(Dir('comInterfaces'),Glob('comInterfaces/[!_]*')+Glob('comInterfaces/_[!_]*'))
