name: Run tests and publish

on:
  push:
    branches:
    - master
    - beta
    - rc
    - 'try-**'
    tags:
    - 'release-**'

  pull_request:
    branches:
    - master
    - beta
    - rc

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  START_BUILD_NUMBER: 100000
  pullRequestNumber: ${{ github.event_name == 'pull_request' && github.event.number }}
  scons_publisher: NV Access
  # Comment out any of the feature_* variables to disable the respective build feature.
  # They are checked for existence of content, not specific value.
  # feature_buildSymbols: configured
  # feature_uploadSymbolsToMozilla: configured
  # feature_buildAppx: configured
  # feature_crowdinSync: configured
  # feature_signing: configured

jobs:
  buildNVDA:
    name: Build NVDA
    runs-on: windows-latest
    steps:
    - name: Checkout NVDA
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install dependencies
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: x86
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}
    - name: Set version variables
      run: ci/scripts/setBuildVersionVars.ps1
    - name: Set scons args
      run: ci/scripts/setSconsArgs.ps1
    - name: Prepare source code
      run: scons source %sconsArgs% ${{ !runner.debug && '--all-cores' }}
      shell: cmd
    - name: Prepare source code for launcher
      run: scons %sconsOutTargets% %sconsArgs% ${{ !runner.debug && '--all-cores' }}
      shell: cmd
    - name: Prepare for tests
      run: ci/scripts/tests/beforeTests.ps1
    - name: Cache scons build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}

  checkPot:
    name: Check translator comments
    runs-on: windows-latest
    needs: buildNVDA
    steps:
    - name: Checkout cached build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}
        fail-on-cache-miss: true
    - name: Check comments for translators
      run: ci/scripts/tests/translationCheck.ps1
    - name: Upload artifact
      id: uploadArtifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Check pot results
        path: output/nvda.pot
        overwrite: true

  licenseCheck:
    name: Check license compatibility of dependencies
    runs-on: windows-latest
    needs: buildNVDA
    if: contains(github.event.head_commit.modified, 'requirements.txt')
    steps:
    - name: Checkout cached build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}
        fail-on-cache-miss: true
    - name: License check
      run: ci/scripts/tests/licenseCheck.ps1
    - name: Upload artifact
      id: uploadArtifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: License check results
        path: testOutput/license/licenseCheckResults.md
        overwrite: true

  unitTests:
    name: Run unit tests
    runs-on: windows-latest
    needs: buildNVDA
    steps:
    - name: Checkout cached build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}
        fail-on-cache-miss: true
    - name: Run unit tests
      run: ci/scripts/tests/unitTests.ps1
    - name: Upload artifact
      id: uploadArtifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Unit tests results
        path: testOutput/unit/unitTests.xml
        overwrite: true

  createLauncher:
    name: Create launcher
    runs-on: windows-latest
    needs: buildNVDA
    steps:
    - name: Checkout cached build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}
        fail-on-cache-miss: true
    - name: Set version variables
      run: ci/scripts/setBuildVersionVars.ps1
    - name: Set scons args
      run: ci/scripts/setSconsArgs.ps1
    - name: Build launcher
      run: scons launcher %sconsArgs% ${{ !runner.debug && '--all-cores' }}
      shell: cmd
    - name: Upload launcher
      id: uploadLauncher
      uses: actions/upload-artifact@v4
      with:
        name: NVDA launcher
        path: output/nvda*.exe
        overwrite: true

  systemTests:
    name: Run system tests
    runs-on: windows-latest
    needs: createLauncher
    steps:
    - name: Checkout cached build
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}
        key: ${{ github.ref }}-${{ github.run_id }}
        fail-on-cache-miss: true
    - name: Get NVDA launcher
      id: getLauncher
      uses: actions/download-artifact@v4
      with:
        name: NVDA launcher
        path: output
    - name: Install NVDA
      run: ci/scripts/installNVDA.ps1
      env:
        nvdaLauncherDir: ${{ steps.getLauncher.outputs.download-path }}
    - name: Run system tests
      run: ci/scripts/tests/systemTests.ps1
      env:
        nvdaLauncherDir: ${{ steps.getLauncher.outputs.download-path }}
    - name: Upload system tests results
      id: uploadSystemTestsResults
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: System tests results
        path: testOutput/system

  cleanupCache:
    name: Cleanup cache
    permissions:
      actions: write
      contents: read
    needs: [checkPot, licenseCheck, unitTests, systemTests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup cache
        shell: bash
        run: gh cache delete ${{ github.ref }}-${{ github.run_id }}
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}

  release:
    name: Release NVDA
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [checkPot, licenseCheck, unitTests, systemTests]
    if: startsWith(github.ref_name, 'release-') && !contains(github.ref_name, 'beta')
    steps:
    - name: Get normalized tag names
      id: getReleaseNotes
      shell: bash
      run: |
        echo RELEASE_NAME=$GITHUB_REF_NAME | sed 's/release-//g' >> $GITHUB_OUTPUT
        echo NORMALIZED_TAG_NAME=$GITHUB_REF_NAME | sed 's/\./-/g' | sed 's/release-//g' >> $GITHUB_OUTPUT
    - name: Get NVDA launcher
      uses: actions/download-artifact@v4
      with:
        name: NVDA launcher
        path: output
    - name: Publish release
      uses: softprops/action-gh-release@v2
      with:
        prerelease: ${{ contains(github.ref_name, 'rc') }}
        make_latest: ${{ !contains(github.ref_name, 'rc') }}
        discussion_category_name: ${{ !contains(github.ref_name, 'rc') && 'Releases' }}
        name: ${{ steps.getReleaseNotes.outputs.RELEASE_NAME }}
        files: output/nvda*.exe
        body: Highlights and download links can be found in the [release blog post](https://www.nvaccess.org/post/nvda-${{ steps.getReleaseNotes.outputs.NORMALIZED_TAG_NAME }}/)
