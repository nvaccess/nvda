/* Numbering for table of contents.
.toc > ul > li is used as the base for the numbering.
This is because the first and only first level TOC element is the heading for the page, so it should be skipped.
*/
.toc > ul > li {
  list-style-type: none;
  counter-reset: toc-counter;
}

.toc > ul > li li {
  counter-increment: toc-counter 1;
}

.toc > ul > li li:before {
  content: counter(toc-counter) ". ";
}

.toc > ul > li ul {
  list-style-type: none;
  counter-reset: toc-counters;
}

.toc > ul > li ul li:before {
  counter-increment: toc-counters;
  content: counters(toc-counters, ".") ". "; /* generates inherited counters from parents */
}

/* RTL */

/* Note there is a known bug where the numbering is not reversed for RTL languages.

Desired:
lorem ١.١
ipsum ٢.١
dolar ٣.١

Actual:
lorem ١.١
ipsum ١.٢
dolar ١.٣

This is due to counters always appending to the end of the list, and not the start.
Ideally there would be an option to reverse the numbering for RTL languages.

https://stackoverflow.com/a/35391887
*/
:lang(ar) .toc > ul > li ul li:before, :lang(fa) .toc > ul > li ul li:before {
  counter-increment: toc-counters 1;
  content: counters(toc-counters, ".", arabic-indic) " "; /* generates inherited counters from parents */
}


/* Numbering for headings. */

h1 {
  counter-reset: h2counter;
}

h2 {
  counter-reset: h3counter;
  counter-increment: h2counter 1;
}

h3 {
  counter-reset: h4counter;
  counter-increment: h3counter 1;
}

h4 {
  counter-reset: h5counter;
  counter-increment: h4counter 1;
}

h5 {
  counter-reset: h6counter;
  counter-increment: h5counter 1;
}

h6 {
  counter-increment: h6counter 1;
}

h2:before {
  content: counter(h2counter) ". ";
}

h3:before {
  content: counter(h2counter) "." counter(h3counter) ". ";
}

h4:before {
  content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) ". ";
}

h5:before {
  content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) ". ";
}

h6:before {
  content: counter(h2counter) "." counter(h3counter) "." counter(h4counter) "." counter(h5counter) "." counter(h6counter) ". ";
}

/* RTL */
:lang(ar) h2:before, :lang(fa) h2:before {
  content: counter(h2counter, arabic-indic) ". ";
}

:lang(ar) h3:before, :lang(fa) h3:before {
  content: counter(h3counter, arabic-indic) "." counter(h2counter, arabic-indic) ". ";
}

:lang(ar) h4:before, :lang(fa) h4:before {
  content: counter(h4counter, arabic-indic) "."  counter(h3counter, arabic-indic) "." counter(h2counter, arabic-indic) ". ";
}

:lang(ar) h5:before, :lang(fa) h5:before {
  content: counter(h5counter, arabic-indic) "." counter(h4counter, arabic-indic) "."  counter(h3counter, arabic-indic) "." counter(h2counter, arabic-indic) ". ";
}

:lang(ar) h6:before, :lang(fa) h6:before {
  content: counter(h6counter, arabic-indic) "." counter(h5counter, arabic-indic) "." counter(h4counter, arabic-indic) "."  counter(h3counter, arabic-indic) "." counter(h2counter, arabic-indic) ". ";
}
